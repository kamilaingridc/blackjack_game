import random
import time
from players import Jogador


class Game:
    def __init__(self):
        self.__deck = [2, 3, 4, 5, 6, 7, 8, 9, 10] * 4
        self.__players = []

    def distribuir_cartas(self, jogadores):
        random.shuffle(self.__deck)
        for jogador in jogadores:
            carta = self.__deck.pop()
            jogador.receber_carta(carta)

    def regras(self):
        print("REGRAS DO BLACKJACK!\n"
              "O objetivo é obter uma mão com um valor total mais próximo de 21 do que o oponente, "
              "sem ultrapassar 21.\n"
              "\nCartas e Valores:\n"
              "As cartas têm o valor correspondente ao número nelas representado.\n"
              "\nJogabilidade:\n"
              "Os jogadores podem pedir cartas adicionais para se aproximar de 21 ou manter as "
              "cartas atuais. Se o total das cartas do jogador ultrapassar 21, ele perde automaticamente.\n")
        time.sleep(1)
        self.menu()

    def vencedor(self, jogadores):
        pontuacoes = {jogador.nome: sum(jogador.mostrar_cartas()) for jogador in jogadores}
        pontuacoes_validas = {nome: pontuacao for nome, pontuacao in pontuacoes.items() if pontuacao <= 21}

        if not pontuacoes_validas:
            print("Todos os jogadores ultrapassaram 21. Não há vencedor.")
            return None

        pontuacao_maxima = max(pontuacoes_validas.values())
        vencedores = [nome for nome, pontuacao in pontuacoes_validas.items() if pontuacao == pontuacao_maxima]

        if len(vencedores) == 1:
            print(f"O vencedor é: {vencedores[0]} com um total de {pontuacao_maxima} pontos.")
        else:
            print(f"Empate! Os seguintes jogadores empataram com {pontuacao_maxima} pontos: {', '.join(vencedores)}")

    def jogo_jogadores(self, jogadores):
        for jogador in jogadores:
            print(f'Dados do jogador {jogador.nome}:\n'
                  f'Idade: {jogador.idade}\n'
                  f'Cartas: {jogador.mostrar_cartas()}\n')
            escolha = 0

            while escolha != 2:
                escolha = int(input(f'Jogador {jogador.nome}, o que você quer fazer:\n'
                                    f'[1] Pegar mais cartas | [2] Parar de pegar cartas\n'))
                if escolha == 1:
                    carta = random.choice(self.__deck)
                    jogador.receber_carta(carta)
                    print(f'{jogador.nome}, suas cartas atuais: {jogador.mostrar_cartas()}\n')

                    total_pontos = sum(jogador.mostrar_cartas())
                    if total_pontos > 21:
                        print(f'{jogador.nome}, você ultrapassou 21. Perdeu!\n')
                        break
                elif escolha == 2:
                    print(f'{jogador.nome}, suas cartas atuais: {jogador.mostrar_cartas()}.\n'
                          f'Fim do jogo!')
                    break
                elif escolha != 2:
                    print("Opção inválida. Tente novamente.")

    def dados_jogadores(self):
        jogadores_jogando = int(input("Quantos jogadores vão jogar?\n"))
        if jogadores_jogando >= 2:
            jogadores = []
            for i in range(jogadores_jogando):
                name = input(f"Jogador {i + 1}, qual seu nome?\n")
                try:
                    age = int(input(f"Jogador {name}, qual sua idade?\n"))
                    jogador = Jogador(name, age, 200)
                    jogadores.append(jogador)
                    if age < 18:
                        print("Você deve ter pelo menos 18 anos para jogar.")
                        exit()
                except ValueError:
                    print("Por favor, insira uma idade válida.")

            self.distribuir_cartas(jogadores)

            self.jogo_jogadores(jogadores)
            self.vencedor(jogadores)

        else:
            print("Número mínimo de jogadores: 2.\n"
                  "Tente novamente!\n")
            self.dados_jogadores()

    def menu(self):
        print("Bem-vindo ao nosso Blackjack Game!!")
        print("Escolha uma das opções:\n"
              "[1] Jogar | [2] Regras | [3] Sair")
        opcao = int(input("Digite a opção desejada:\n"))
        if opcao == 1:
            self.dados_jogadores()
            print("Ambos começam com 200 fichas.")
        elif opcao == 2:
            self.regras()
        elif opcao == 3:
            print("Saindo do jogo...")
            exit()
        else:
            print("Opção inválida. Tente novamente.")
            self.menu()


if __name__ == "__main__":
    jogo = Game()
    jogo.menu()












class Jogador():
    def __init__(self, name, age, tokens):
        # Inicialização dos atributos privados do jogador
        self.__name = name
        self.__age = age
        self.__tokens = tokens

    # Getters e setters para os atributos privados do jogador
    @property
    def name(self):
        return self.__name

    @property
    def age(self):
        return self.__age

    @property
    def tokens(self):
        return self.__tokens

    @tokens.setter
    def tokens(self, value):
        self.__tokens = value










hard
import random


class Jogo:
    def __init__(self):
        self.__fichas = 100
        self.__aposta = 0
        self.__min_pontos_parar = {
            15: 0, 16: 60, 17: 70, 18: 80, 19: 90, 20: 95, 21: 100
        }
        self.__baralho = {
            'A': 11, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 10, 'Q': 10, 'K': 10
        }
        self.__cartas_jogador = []
        self.__cartas_computador = []
        self.__pontos_jogador = 0
        self.__pontos_computador = 0

    def __str__(self):
        return f"Fichas: {self.__fichas}, Aposta: {self.__aposta}"

    @property
    def fichas(self):
        return self.__fichas

    @fichas.setter
    def fichas(self, valor):
        self.__fichas = valor

    @property
    def aposta(self):
        return self.__aposta

    @aposta.setter
    def aposta(self, valor):
        if valor <= self.__fichas:
            self.__aposta = valor
        else:
            print("Você não possui fichas suficientes para essa aposta!")

    def __calcular_pontos(self, cartas):
        pontos = 0
        ases = 0
        for carta in cartas:
            pontos += self.__baralho[carta]
            if carta == 'A':
                ases += 1
        while pontos > 21 and ases:
            pontos -= 10
            ases -= 1
        return pontos

    def __pegar_carta(self):
        carta = random.choice(list(self.__baralho.keys()))
        return carta

    def __jogar_computador(self):
        while self.__pontos_computador < 15 or (
                self.__pontos_computador <= 21 and random.randint(1, 100) > self.__min_pontos_parar[
            self.__pontos_computador]):
            carta = self.__pegar_carta()
            self.__cartas_computador.append(carta)
            self.__pontos_computador = self.__calcular_pontos(self.__cartas_computador)

    def jogar(self):
        print("Bem-vindo ao Blackjack!")
        while self.__fichas > 0:
            print("\nNovo Jogo!")
            self.__pontos_jogador = 0
            self.__pontos_computador = 0
            self.__cartas_jogador = []
            self.__cartas_computador = []

            while True:
                self.aposta = int(input(f"\nFichas disponíveis: {self.__fichas}. Faça sua aposta (mínimo de 20): "))
                if self.aposta >= 20:
                    break
                else:
                    print("Aposta mínima é de 20 fichas!")

            self.__cartas_jogador.append(self.__pegar_carta())
            self.__cartas_jogador.append(self.__pegar_carta())
            self.__pontos_jogador = self.__calcular_pontos(self.__cartas_jogador)

            self.__jogar_computador()

            print(f"\nSuas cartas: {self.__cartas_jogador} - Pontos: {self.__pontos_jogador}")
            while True:
                escolha = input("\nDeseja pedir mais uma carta? (s/n): ")
                if escolha.lower() == 's':
                    nova_carta = self.__pegar_carta()
                    self.__cartas_jogador.append(nova_carta)
                    self.__pontos_jogador = self.__calcular_pontos(self.__cartas_jogador)
                    print(f"Nova carta: {nova_carta} - Pontos: {self.__pontos_jogador}")
                    if self.__pontos_jogador > 21:
                        print("Você estourou 21! Você perdeu.")
                        self.__fichas -= self.__aposta
                        break
                else:
                    break

            if self.__pontos_jogador <= 21:
                print(f"\nComputador: {self.__cartas_computador} - Pontos: {self.__pontos_computador}")
                if self.__pontos_computador > 21 or self.__pontos_computador < self.__pontos_jogador:
                    print("Você ganhou!")
                    self.__fichas += self.__aposta
                elif self.__pontos_computador > self.__pontos_jogador:
                    print("Você perdeu.")
                    self.__fichas -= self.__aposta
                else:
                    print("Empate!")
            print(f"\nFichas restantes: {self.__fichas}")

        print("Você ficou sem fichas. Fim de jogo!")


jogo = Jogo()
jogo.jogar()
































import random
from players import Jogador


class Jogo():
    def __init__(self):
        self.__jogadores = []
        self.__baralho = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] * 5
        self.__num = 21
        self.__winner = None

    def menu(self):
        try:
            print("-" * 50)
            print("1- Start game")
            print("2- See value of cards")
            print("3- Rules")
            print("4- Exit game")
            option = int(input("What do you want to do? \n"))
            print("-" * 50)

            match option:
                case 1:
                    self.players()
                    print("Both of you start with 100 betting chips")
                    self.start_game()
                    self.play_again()

                case 2:
                    print("Value of cards:")
                    print(self.get_baralho())
                    self.menu()

                case 3:
                    self.regras()

                case 4:
                    exit()

        except ValueError:
            print("-" * 50)
            print("Invalid data")
            self.menu()

    @property
    def get_jogadores(self):
        return self.__jogadores

    def get_baralho(self):
        return self.__baralho

    def regras(self):
        print("Rules blackjack")
        print("\nObjective: Get as close as possible to 21 points without exceeding it."
              "\nCard Distribution:"
              "\nEach player and the dealer receive two cards."
              "\nWinning and Losing:"
              "\nBlackjack: Having 21 points with the first two cards automatically wins"
              "\nGoing Over 21: Immediate loss."
              "\nTies:"
              "\nThe bet is typically returned in case of a tie.")
        self.menu()

    def sortear_cartas(self, jogador):
        carta = random.choice(self.__baralho)
        jogador.cartas_jogador.append(carta)
        self.__baralho.remove(carta)

    def somar_cartas(self, jogador):
        return sum(jogador.cartas_jogador)

    def dif(self, soma_jogador):
        if soma_jogador > self.__num:
            return soma_jogador - self.__num
        else:
            return self.__num - soma_jogador

    def aposta(self, vencedor):
        for jogador in self.__jogadores:
            if vencedor == jogador:
                jogador.fichas += sum(jogador.fichas_apostadas)
                jogador.fichas_apostadas.clear()
            else:
                jogador.fichas_apostadas.clear()

    def players(self):
        qtd = int(input("How many players:"))

        if qtd >= 2:
            for i in range(1, qtd + 1):
                nome = input(f'What\'s the name of player {i}? ')
                jogador = Jogador(nome, 100)
                self.__jogadores.append(jogador)

            print("PLAYERS:")
            for i, jogador in enumerate(self.__jogadores, start=1):
                print(f'{i}. {jogador.nome}')

        else:
            print("The minimum to play is 2 players")
            print("-" * 50)
            self.players()

    def start_game(self):
        print("Let's start!")

        try:
            print("-" * 50)
            for jogador in self.__jogadores:
                aposta_jogador = float(input(f'{jogador.nome}, how many chips do you want to bet? R$'))

                if aposta_jogador > jogador.fichas:
                    print("You don't have enough chips for this bet, please re-bet.")
                    self.start_game()

                jogador.fichas -= aposta_jogador
                jogador.fichas_apostadas.append(aposta_jogador)
                self.sortear_cartas(jogador)

            while jogador in self.__jogadores:
                print("-" * 50)
                for jogador in self.__jogadores:
                    print(f'Cards {jogador.nome}: {self.somar_cartas(jogador)}')

                acao_jogadores = []
                for jogador in self.__jogadores:
                    print("-" * 50)
                    acao = int(input(f'{jogador.nome}, what do you want to do?:'
                                     f'\n1- Ask for cards'
                                     f'\n2- Stop'))
                    acao_jogadores.append((jogador, acao))

                for jogador, acao in acao_jogadores:
                    if acao == 1:
                        self.sortear_cartas(jogador)

                if all(acao == 2 for jogador, acao in acao_jogadores):
                    self.verificar_vencedor()
                    break

        except ValueError:
            print("Invalid data")
            self.start_game()

    def verificar_vencedor(self):
        soma_jogadores = [self.somar_cartas(jogador) for jogador in self.__jogadores]
        diferenca_jogadores = [self.dif(soma) for soma in soma_jogadores]

        menor_diferenca = float('inf')

        for i, jogador in enumerate(self.__jogadores):
            if diferenca_jogadores[i] < menor_diferenca and soma_jogadores[i] < self.__num:
                self.__winner = jogador
                menor_diferenca = diferenca_jogadores[i]
            elif diferenca_jogadores[i] == menor_diferenca and soma_jogadores[i] < self.__num:
                if soma_jogadores[i] > soma_jogadores[self.__jogadores.index(self.__winner)]:
                    self.__winner = jogador

        for i, jogador in enumerate(self.__jogadores):
            if soma_jogadores[i] == self.__num:
                print("-" * 50)
                print(f'{jogador.nome} you won with {soma_jogadores[i]} points!')
                self.aposta(jogador)
                print(f'Now {jogador.nome} has R${jogador.fichas} betting chips')

        if all(soma > self.__num for soma in soma_jogadores):
            print("-" * 50)
            print(f"It's a draw! All players exceeded the target value.")
            for i, jogador in enumerate(self.__jogadores):
                print(f'{jogador.nome}:{soma_jogadores[i]}')
        else:
            print("-" * 50)
            print(f'{self.__winner.nome} you won with {soma_jogadores[self.__jogadores.index(self.__winner)]} points!')
            self.aposta(self.__winner)
            print(f'Now {self.__winner.nome} has R${self.__winner.fichas} betting chips')

    def play_again(self):
        print("-" * 50)

    def play_again(self):
        # arrumar
        print("-" * 50)
        option = int(input("Do you want to play again?\n1- Yes\n2- No"))
        match option:
            case 1:
                self.menu()

            case 2:
                exit()


if __name__ == '__main__':
    jogo = Jogo()
    jogo.menu()












